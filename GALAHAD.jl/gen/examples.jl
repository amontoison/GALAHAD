function examples(package::String, example::String)
  if example == ""
    text = "# test_" * package * ".jl\n# Simple code to test the Julia interface to " * uppercase(package) * "\n"
  else
    src = "../../src/$package/C/" * package * example * ".c"
    text = read(src, String)
  end
  dst = "../test/test_" * package * ".jl"
  text = replace(text, "    " => "")
  text = replace(text, "int main(void) {\n\n" => "# test_$package.jl\n# Simple code to test the Julia interface to " * uppercase(package) * "\n\nusing GALAHAD\nusing Printf\n\n")
  text = replace(text, "//" => "#")
  text = replace(text, ";" => "")
  text = replace(text, "&" => "")
  text = replace(text, "- INFINITY" => "-Inf")
  text = replace(text, "INFINITY" => "Inf")
  text = replace(text, "printf" => "@printf")
  text = replace(text, "else if" => "elseif")
  text = replace(text, "}else{" => "else")
  text = replace(text, "} else {" => "else")
  text = replace(text, "void *data" => "data = [Ptr{Ptr{Cvoid}}()]")
  text = replace(text, "struct $(package)_control_type control" => "control = $(package)_control_type{Float64}()")
  text = replace(text, "struct $(package)_inform_type inform" => "inform = $(package)_inform_type{Float64}()")
  text = replace(text, "} #" => "]  #")
  text = replace(text, "}  #" => "]  #")
  text = replace(text, "}   #" => "]  #")
  for var in ("f", "power", "weight", "shift", "radius", "half_radius")
    text = replace(text, "real_wp_ $var =" => "$var =")
  end
  for var in ("A_val", "A_dense", "b", "c", "c_l", "c_u", "x_l", "x_u", "y_l", "y_u", "z_l", "z_u", "g", "x_0",
              "w", "x", "y", "z", "val", "dense", "rhs", "rhst", "sol", "H_val", "H_dense")
    text = replace(text, "real_wp_ $var[] = {" => "$var = Float64[")
  end
  for var in ("n", "ne", "m", "A_ne", "A_dense_ne", "H_ne", "H_dense_ne")
    text = replace(text, "int $var =" => "$var =")
  end
  for var in ("A_row", "A_col", "A_ptr", "row", "col", "ptr", "c_stat", "x_stat", "H_row", "H_col", "H_ptr")
    text = replace(text, "int $var[] = {" => "$var = Cint[")
  end
  for val in ("3", "5", "6", "n")
    text = replace(text, "for( int d=1 d <= $val d++){" => "for d = 1:$val")
  end
  for index in ("unit_m", "new_radius")
    text = replace(text, "for( int $index=0 $index <= 1 $index++){" => "for $index = 0:1")
  end
  for val in ("c", "g", "u", "v", "x", "r", "vector", "h_vector")
    text = replace(text, "real_wp_ $val[n]" => "$val = zeros(Float64, n)")
    text = replace(text, "real_wp_ $val[m]" => "$val = zeros(Float64, m)")
  end
  for val in ("x_stat", "c_stat", "index_nz_u", "index_nz_v", "depen")
    text = replace(text, "int $val[n]" => "$val = zeros(Cint, n)")
    text = replace(text, "int $val[m]" => "$val = zeros(Cint, m)")
  end

  text = replace(text, "if(" => "if ")
  text = replace(text, "){" => ")")
  text = replace(text, ")\n}\n}" => ")\n")
  text = replace(text, ")\n}" => ")\n")
  text = replace(text, "\n\n\n" => "\n")
  text = replace(text, "}\n" => "]\n")
  text = replace(text, "NULL" => "Cint[]")
  text = replace(text, "char st" => "st = ' '")
  text = replace(text, "int status" => "status = Ref{Cint}()")
  text = replace(text, "int n_depen" => "n_depen = Ref{Cint}()")
  text = replace(text, "real_wp_ radius" => "radius = Ref{Float64}()")
  text = replace(text, " ]" => "]")
  text = replace(text, "== 0)" => "== 0")
  text = replace(text, "case 1: # sparse co-ordinate storage" => "# sparse co-ordinate storage\nif d == 1")
  text = replace(text, "case 2: # sparse by rows" => "# sparse by rows\nif d == 2")
  text = replace(text, "case 3: # dense" => "# dense\nif d == 3")
  text = replace(text, "case 4: # diagonal" => "# diagonal\nif d == 4")
  text = replace(text, "case 5: # scaled identity" => "# scaled identity\nif d == 5")
  text = replace(text, "case 6: # identity" => "# identity\nif d == 6")
  text = replace(text, "case 7: # zero" => "# zero\nif d == 7")
  text = replace(text, "break\n" => "end\n")
  text = replace(text, "int maxabsarray(real_wp_ a[], int n, real_wp_ *maxabs)" => "maxabsarray(a) = maximum(abs.(a))")
  for i = 0:5
    text = replace(text, "( status == $i ) {" => "status == $i")
  end
  text = replace(text, "( status < 0 ) {" => "status < 0")
  text = replace(text, "while(true)" => "while true")
  text = replace(text, "for( int i = 0 i < n i++)" => "for i = 1:n")
  text = replace(text, "for( int i = 0 i < m i++)" => "for i = 1:m")
  text = replace(text, "constrastatus = Ref{Cint}()" => "constraint status")
  text = replace(text, "}#" => "]  #")
  text = replace(text, "#for" => "# for")
  text = replace(text, "#@" => "# @")
  text = replace(text, "# for i = 1:n @" => "# for i = 1:n\n#   @")
  write(dst, text)

  # Generate a symbolic link for the Julia tests
    current_folder = pwd()
    cd("../../src/$package")
    !isdir("Julia") && mkdir("Julia")
    cd("Julia")
    rm("test_$package.jl", force=true)
    symlink("../../../GALAHAD.jl/test/test_$package.jl", "test_$package.jl")
    cd(current_folder)
  end
end

function main(name::String="all")
  (name == "all" || name == "arc")      && examples("arc"     , "tf")
  (name == "all" || name == "bgo")      && examples("bgo"     , "tf")
  (name == "all" || name == "blls")     && examples("blls"    , "tf")
  (name == "all" || name == "bllsb")    && examples("bllsb"   , "tf")
  (name == "all" || name == "bqp")      && examples("bqp"     , "tf")
  (name == "all" || name == "bqpb")     && examples("bqpb"    , "tf")
  (name == "all" || name == "bsc")      && examples("bsc"     , ""  )
  (name == "all" || name == "ccqp")     && examples("ccqp"    , "tf")
  (name == "all" || name == "clls")     && examples("clls"    , "tf")
  (name == "all" || name == "convert")  && examples("convert" , ""  )
  (name == "all" || name == "cqp")      && examples("cqp"     , "tf")
  (name == "all" || name == "cro")      && examples("cro"     , "tf")
  (name == "all" || name == "dgo")      && examples("dgo"     , "tf")
  (name == "all" || name == "dps")      && examples("dps"     , "tf")
  (name == "all" || name == "dqp")      && examples("dqp"     , "tf")
  (name == "all" || name == "eqp")      && examples("eqp"     , "tf")
  (name == "all" || name == "fdc")      && examples("fdc"     , "tf")
  (name == "all" || name == "fit")      && examples("fit"     , ""  )
  (name == "all" || name == "glrt")     && examples("glrt"    , "t" )
  (name == "all" || name == "gls")      && examples("gls"     , ""  )
  (name == "all" || name == "gltr")     && examples("gltr"    , "t" )
  (name == "all" || name == "hash")     && examples("hash"    , ""  )
  (name == "all" || name == "ir")       && examples("ir"      , ""  )
  (name == "all" || name == "l2rt")     && examples("l2rt"    , "t" )
  (name == "all" || name == "lhs")      && examples("lhs"     , "t" )
  (name == "all" || name == "llsr")     && examples("llsr"    , "tf")
  (name == "all" || name == "llst")     && examples("llst"    , "tf")
  (name == "all" || name == "lms")      && examples("lms"     , ""  )
  (name == "all" || name == "lpa")      && examples("lpa"     , "tf")
  (name == "all" || name == "lpb")      && examples("lpb"     , "tf")
  (name == "all" || name == "lsqp")     && examples("lsqp"    , "tf")
  (name == "all" || name == "lsrt")     && examples("lsrt"    , "t" )
  (name == "all" || name == "lstr")     && examples("lstr"    , "t" )
  (name == "all" || name == "nls")      && examples("nls"     , "tf")
  (name == "all" || name == "presolve") && examples("presolve", "tf")
  (name == "all" || name == "psls")     && examples("psls"    , "tf")
  (name == "all" || name == "qpa")      && examples("qpa"     , "tf")
  (name == "all" || name == "qpb")      && examples("qpb"     , "tf")
  (name == "all" || name == "roots")    && examples("roots"   , ""  )
  (name == "all" || name == "rpd")      && examples("rpd"     , "tf")
  (name == "all" || name == "rqs")      && examples("rqs"     , "tf")
  (name == "all" || name == "sbls")     && examples("sbls"    , "tf")
  (name == "all" || name == "scu")      && examples("scu"     , ""  )
  (name == "all" || name == "sec")      && examples("sec"     , ""  )
  (name == "all" || name == "sha")      && examples("sha"     , ""  )
  (name == "all" || name == "sils")     && examples("sils"    , ""  )
  (name == "all" || name == "slls")     && examples("slls"    , "tf")
  (name == "all" || name == "sls")      && examples("sls"     , "tf")
  (name == "all" || name == "trb")      && examples("trb"     , "tf")
  (name == "all" || name == "trs")      && examples("trs"     , "tf")
  (name == "all" || name == "tru")      && examples("tru"     , "tf")
  (name == "all" || name == "ugo")      && examples("ugo"     , "t" )
  (name == "all" || name == "uls")      && examples("uls"     , "tf")
  (name == "all" || name == "wcp")      && examples("wcp"     , "tf")
end

# If we want to use the file as a script with `julia wrapper.jl`
if abspath(PROGRAM_FILE) == @__FILE__
  main()
end
